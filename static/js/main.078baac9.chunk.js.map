{"version":3,"sources":["card.jpg","Difficulty.js","MemoryCard.js","Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Difficulty","ListGroup","horizontal","defaultActiveKey","Item","action","href","onClick","props","onChange","React","Component","MemoryCard","className","this","card","visible","id","style","pointerEvents","disabled","src","back","alt","url","Board","state","cards","flippedId","undefined","boardDisabled","Flip","setState","index","findIndex","c","matchId","flippedIndex","flippedCard","solved","forEach","setTimeout","nextProps","map","key","Game","amount","changeDifficulty","a","getCards","reset","halfAmount","page","Math","floor","random","fetch","r","json","body","console","log","i","push","length","j","Button","variant","App","Navbar","bg","Brand","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.078baac9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/card.82b2042d.jpg\";","import React from 'react';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\n\r\nclass Difficulty extends React.Component {\r\n    render() {\r\n      return (\r\n        <ListGroup horizontal defaultActiveKey='#easy'>\r\n          <ListGroup.Item action href='#easy' onClick={() => this.props.onChange(8)}>Easy</ListGroup.Item>\r\n          <ListGroup.Item action href='#medium' onClick={() => this.props.onChange(12)}>Medium</ListGroup.Item>\r\n          <ListGroup.Item action href='#hard' onClick={() => this.props.onChange(16)}>Hard</ListGroup.Item>\r\n        </ListGroup>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Difficulty;","import React from 'react';\r\nimport back from './card.jpg';\r\n\r\nclass MemoryCard extends React.Component {\r\n    render() {\r\n        return (\r\n        <div className='flip'>\r\n            <div className={`memory-card ${this.props.card.visible ? 'flipped' : ''}`} onClick={() => this.props.onClick(this.props.card.id)} style={{ pointerEvents: this.props.card.disabled ? 'none' : 'auto' }}>\r\n                <img className='face back' src={back} alt=''/>\r\n                <img className='face front' src={this.props.card.url} alt=''/>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MemoryCard","import React from 'react';\r\nimport MemoryCard from './MemoryCard';\r\n\r\nclass Board extends React.Component {\r\n  \r\n    state = {\r\n      cards: [],\r\n      flippedId: undefined,\r\n      boardDisabled: false\r\n    };\r\n  \r\n    componentWillReceiveProps(nextProps) {\r\n      this.setState({ cards: nextProps.cards });  \r\n    }\r\n  \r\n    Flip = (id) => {\r\n  \r\n      if(this.state.boardDisabled){\r\n        return;\r\n      }\r\n  \r\n      this.setState({boardDisabled: true});\r\n  \r\n      let cards = [ ...this.state.cards ];\r\n      const flippedId = this.state.flippedId;\r\n  \r\n      const index = cards.findIndex(c => c.id === id);\r\n  \r\n      let card = {...cards[index]};\r\n  \r\n      card.visible = true;\r\n  \r\n      cards[index] = card;\r\n  \r\n      if(flippedId === card.matchId){\r\n        const flippedIndex = cards.findIndex(c => c.matchId === flippedId && c.visible === true);\r\n        let flippedCard = cards[flippedIndex];\r\n  \r\n        card.solved = true;\r\n        card.disabled = true;\r\n  \r\n        flippedCard.solved = true;\r\n        flippedCard.disabled = true;\r\n  \r\n        this.setState({\r\n          flippedId: undefined,\r\n          boardDisabled: false\r\n        });\r\n      }\r\n      else if(flippedId === undefined){\r\n        this.setState({flippedId: card.matchId});\r\n        card.disabled = true;\r\n        this.setState({boardDisabled: false});\r\n      }\r\n      else{\r\n        this.setState({flippedId: undefined});\r\n  \r\n        cards.forEach(card => {\r\n          card.disabled = true;\r\n        });\r\n  \r\n        setTimeout(() => {\r\n          const flippedIndex = cards.findIndex(c => c.matchId === flippedId && c.visible === true);\r\n          let flippedCard = cards[flippedIndex];\r\n  \r\n          card.visible = false;\r\n          flippedCard.visible = false;\r\n  \r\n          cards[index] = card;\r\n          cards[flippedIndex] = flippedCard;\r\n  \r\n          cards.forEach(card => {\r\n            if(!card.solved){\r\n              card.disabled = false;\r\n            }\r\n          });\r\n  \r\n          this.setState({\r\n            cards: cards,\r\n            boardDisabled: false\r\n          });\r\n  \r\n        }, 1000);\r\n      }\r\n  \r\n      this.setState({\r\n        cards: cards\r\n      });\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div className='board'>\r\n          {this.state.cards.map(card => <MemoryCard key={card.id} card={card} onClick={this.Flip}/>)}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default Board;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Difficulty from './Difficulty';\r\nimport Board from './Board';\r\n\r\nclass Game extends React.Component {\r\n    state = { \r\n      amount: 8,\r\n      cards: []\r\n    };\r\n    \r\n    changeDifficulty = async (amount) => {\r\n      this.state.cards = [];\r\n      this.setState({ amount: amount })\r\n      await this.getCards(amount);\r\n    }\r\n  \r\n    reset = async () => {\r\n      this.state.cards = [];\r\n      await this.getCards(this.state.amount);\r\n    }\r\n  \r\n    getCards = async (amount) => {\r\n      const halfAmount = amount / 2;\r\n  \r\n      let cards = [];\r\n\r\n      const page = Math.floor(Math.random() * 100);\r\n      const r = await fetch(`https://picsum.photos/v2/list?page=${page}&limit=${halfAmount}`);\r\n      let body = await r.json();\r\n\r\n      console.log(body);\r\n      let i = 0;\r\n      body.forEach(card => {\r\n\r\n        const url = 'https://picsum.photos/id/' + card.id + '/150/200'\r\n\r\n        cards.push({\r\n            id: i,\r\n            matchId: i,\r\n            url: url,\r\n            visible: false,\r\n            disabled: false,\r\n            solved: false\r\n          });\r\n    \r\n          cards.push({\r\n            id: i + halfAmount,\r\n            matchId: i,\r\n            url: url,\r\n            visible: false,\r\n            disabled: false,\r\n            solved: false\r\n          });\r\n          i++;\r\n      });\r\n  \r\n      //shuffle the deck\r\n      for (let i = cards.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [cards[i], cards[j]] = [cards[j], cards[i]];\r\n      }\r\n  \r\n      this.setState({\r\n        cards: cards\r\n      });\r\n    }\r\n  \r\n    componentDidMount(){\r\n      this.getCards(this.state.amount);\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div className='game'>\r\n          <Board cards={this.state.cards} />\r\n          <div className='controls'>\r\n            <Difficulty onChange={this.changeDifficulty}/>\r\n            <Button variant='secondary' onClick={this.reset}>Reset</Button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Game;","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Game from './Game';\nimport './Board.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Navbar bg='dark' variant='dark'>\n          <Navbar.Brand>MEMORY</Navbar.Brand>\n        </Navbar>\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}